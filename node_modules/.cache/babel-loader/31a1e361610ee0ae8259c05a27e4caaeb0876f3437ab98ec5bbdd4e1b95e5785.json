{"ast":null,"code":"export function getColors(solution, currAnswer) {\n  let colors = Array(solution.length).fill(\"gray\");\n  let solutionChars = solution.slice();\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (currChar === solution[i]) {\n      colors[i] = \"green\";\n      solutionChars.splice(index, 1);\n    }\n  }\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (index !== -1 && colors[i] === \"gray\") {\n      solutionChars.splice(index, 1);\n      colors[i] = \"orange\";\n    }\n  }\n  return colors;\n}\nexport function getNextSquareEnglish(currAnswer) {\n  for (let i = 0; i < currAnswer.length; i++) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\nexport function getNextSquareHebew(currAnswer) {\n  for (let i = currAnswer.length; i >= 0; i--) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\nexport function getPrevSquare(currAnswer, solution) {\n  let nextSquare = getNextSquare(currAnswer, solution);\n  if (nextSquare == null) return solution.length - 1;\n  nextSquare--;\n  if (solution[nextSquare] === \" \") return nextSquare - 1;\n  return nextSquare;\n}\nexport function getEmptyAnswers(solution, numberOfGuesses) {\n  let answers = [];\n  for (let i = 0; i < numberOfGuesses; i++) {\n    let answer = [];\n    for (let j = 0; j < solution.length; j++) {\n      if (solution[j] === \" \") answer.push(\" \");else answer.push(\"\");\n    }\n    answers.push(answer);\n  }\n  return answers;\n}\nexport function getDefaultStyles(nSquares, nGuesses) {\n  const singleGuessStyles = Array(nSquares).fill({\n    backgroundColor: \"white\"\n  });\n  const ans = Array(nGuesses).fill(singleGuessStyles);\n  return ans;\n}\nexport function arraysAreEqual(arr1, arr2) {\n  return arr1 && arr2 && arr1.length === arr2.length && arr1.every((element, index) => element === arr2[index]);\n}","map":{"version":3,"names":["getColors","solution","currAnswer","colors","Array","length","fill","solutionChars","slice","i","currChar","index","indexOf","splice","getNextSquareEnglish","getNextSquareHebew","getPrevSquare","nextSquare","getNextSquare","getEmptyAnswers","numberOfGuesses","answers","answer","j","push","getDefaultStyles","nSquares","nGuesses","singleGuessStyles","backgroundColor","ans","arraysAreEqual","arr1","arr2","every","element"],"sources":["/Users/amirdafnai/Desktop/react-app/my-app/src/appUtils.js"],"sourcesContent":["\n\nexport function getColors(solution, currAnswer) {\n  let colors = Array(solution.length).fill(\"gray\");\n  let solutionChars = solution.slice();\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (currChar === solution[i]) {\n      colors[i] = \"green\";\n      solutionChars.splice(index, 1);\n    }\n  }\n\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (index !== -1 && colors[i] === \"gray\") {\n      solutionChars.splice(index, 1);\n      colors[i] = \"orange\";\n    }\n  }\n  return colors;\n}\nexport function getNextSquareEnglish(currAnswer) {\n  for (let i = 0; i < currAnswer.length; i++) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\nexport function getNextSquareHebew(currAnswer){\n  for (let i = currAnswer.length; i >= 0; i--) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\n\n\n\n\nexport function getPrevSquare(currAnswer, solution) {\n  let nextSquare = getNextSquare(currAnswer, solution);\n  if (nextSquare == null) return solution.length - 1;\n  nextSquare--;\n  if (solution[nextSquare] === \" \") return nextSquare - 1;\n  return nextSquare;\n}\n\n\nexport function getEmptyAnswers(solution, numberOfGuesses) {\n  let answers = [];\n  for (let i = 0; i < numberOfGuesses; i++) {\n    let answer = [];\n    for (let j = 0; j < solution.length; j++) {\n      if (solution[j] === \" \") answer.push(\" \");\n      else answer.push(\"\");\n    }\n    answers.push(answer);\n  }\n  return answers;\n}\nexport function getDefaultStyles(nSquares, nGuesses) {\n  const singleGuessStyles = Array(nSquares).fill({\n    backgroundColor: \"white\",\n  });\n  const ans = Array(nGuesses).fill(singleGuessStyles);\n  return ans;\n}\nexport function arraysAreEqual(arr1, arr2) {\n  return (\n    arr1 &&\n    arr2 &&\n    arr1.length === arr2.length &&\n    arr1.every((element, index) => element === arr2[index])\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}