{"ast":null,"code":"export function getColors(solution, currAnswer) {\n  let colors = Array(solution.length).fill(\"gray\");\n  let solutionChars = solution.slice();\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (currChar === solution[i]) {\n      colors[i] = \"green\";\n      solutionChars.splice(index, 1);\n    }\n  }\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (index !== -1 && colors[i] === \"gray\") {\n      solutionChars.splice(index, 1);\n      colors[i] = \"orange\";\n    }\n  }\n  return colors;\n}\nexport function getNextSquare(currAnswer) {\n  for (let i = 0; i < currAnswer.length; i++) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\nexport function getPrevSquare(currAnswer, solution) {\n  let nextSquare = getNextSquare(currAnswer, solution);\n  if (nextSquare == null) return solution.length - 1;\n  nextSquare--;\n  if (solution[nextSquare] === \" \") return nextSquare - 1;\n  return nextSquare;\n}","map":{"version":3,"names":["getColors","solution","currAnswer","colors","Array","length","fill","solutionChars","slice","i","currChar","index","indexOf","splice","getNextSquare","getPrevSquare","nextSquare"],"sources":["/Users/amirdafnai/Desktop/react-app/my-app/src/appUtils.js"],"sourcesContent":["export function getColors(solution, currAnswer) {\n  let colors = Array(solution.length).fill(\"gray\");\n  let solutionChars = solution.slice();\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (currChar === solution[i]) {\n      colors[i] = \"green\";\n      solutionChars.splice(index, 1);\n    }\n  }\n\n  for (let i = 0; i < solution.length; i++) {\n    if (solution[i] === \" \") continue;\n    const currChar = currAnswer[i];\n    const index = solutionChars.indexOf(currChar);\n    if (index !== -1 && colors[i] === \"gray\") {\n      solutionChars.splice(index, 1);\n      colors[i] = \"orange\";\n    }\n  }\n  return colors;\n}\nexport function getNextSquare(currAnswer) {\n  for (let i = 0; i < currAnswer.length; i++) {\n    if (currAnswer[i] === \"\") return i;\n  }\n  return null;\n}\nexport function getPrevSquare(currAnswer, solution) {\n  let nextSquare = getNextSquare(currAnswer, solution);\n  if (nextSquare == null) return solution.length - 1;\n  nextSquare--;\n  if (solution[nextSquare] === \" \") return nextSquare - 1;\n  return nextSquare;\n}\n"],"mappings":"AAAA,OAAO,SAASA,SAASA,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAC9C,IAAIC,MAAM,GAAGC,KAAK,CAACH,QAAQ,CAACI,MAAM,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;EAChD,IAAIC,aAAa,GAAGN,QAAQ,CAACO,KAAK,CAAC,CAAC;EACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;IACxC,IAAIR,QAAQ,CAACQ,CAAC,CAAC,KAAK,GAAG,EAAE;IACzB,MAAMC,QAAQ,GAAGR,UAAU,CAACO,CAAC,CAAC;IAC9B,MAAME,KAAK,GAAGJ,aAAa,CAACK,OAAO,CAACF,QAAQ,CAAC;IAC7C,IAAIA,QAAQ,KAAKT,QAAQ,CAACQ,CAAC,CAAC,EAAE;MAC5BN,MAAM,CAACM,CAAC,CAAC,GAAG,OAAO;MACnBF,aAAa,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;IAChC;EACF;EAEA,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,QAAQ,CAACI,MAAM,EAAEI,CAAC,EAAE,EAAE;IACxC,IAAIR,QAAQ,CAACQ,CAAC,CAAC,KAAK,GAAG,EAAE;IACzB,MAAMC,QAAQ,GAAGR,UAAU,CAACO,CAAC,CAAC;IAC9B,MAAME,KAAK,GAAGJ,aAAa,CAACK,OAAO,CAACF,QAAQ,CAAC;IAC7C,IAAIC,KAAK,KAAK,CAAC,CAAC,IAAIR,MAAM,CAACM,CAAC,CAAC,KAAK,MAAM,EAAE;MACxCF,aAAa,CAACM,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MAC9BR,MAAM,CAACM,CAAC,CAAC,GAAG,QAAQ;IACtB;EACF;EACA,OAAON,MAAM;AACf;AACA,OAAO,SAASW,aAAaA,CAACZ,UAAU,EAAE;EACxC,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,UAAU,CAACG,MAAM,EAAEI,CAAC,EAAE,EAAE;IAC1C,IAAIP,UAAU,CAACO,CAAC,CAAC,KAAK,EAAE,EAAE,OAAOA,CAAC;EACpC;EACA,OAAO,IAAI;AACb;AACA,OAAO,SAASM,aAAaA,CAACb,UAAU,EAAED,QAAQ,EAAE;EAClD,IAAIe,UAAU,GAAGF,aAAa,CAACZ,UAAU,EAAED,QAAQ,CAAC;EACpD,IAAIe,UAAU,IAAI,IAAI,EAAE,OAAOf,QAAQ,CAACI,MAAM,GAAG,CAAC;EAClDW,UAAU,EAAE;EACZ,IAAIf,QAAQ,CAACe,UAAU,CAAC,KAAK,GAAG,EAAE,OAAOA,UAAU,GAAG,CAAC;EACvD,OAAOA,UAAU;AACnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}